// Code generated by gotsrpc https://github.com/foomo/gotsrpc  - DO NOT EDIT.

package edit

import (
	http "net/http"

	gotsrpc "github.com/foomo/gotsrpc"
	github_com_janhalfar_vocablion_services "github.com/janhalfar/vocablion/services"
)

type ServiceGoTSRPCClient interface {
	UpsertWord(word *github_com_janhalfar_vocablion_services.EventUpsertWord) (err *github_com_janhalfar_vocablion_services.ServiceError, clientErr error)
	SetClientEncoding(encoding gotsrpc.ClientEncoding)
	SetTransportHttpClient(client *http.Client)
}

type tsrpcServiceGoTSRPCClient struct {
	URL      string
	EndPoint string
	Client   gotsrpc.Client
}

func NewDefaultServiceGoTSRPCClient(url string) ServiceGoTSRPCClient {
	return NewServiceGoTSRPCClient(url, "/service/edit")
}

func NewServiceGoTSRPCClient(url string, endpoint string) ServiceGoTSRPCClient {
	return NewServiceGoTSRPCClientWithClient(url, "/service/edit", nil)
}

func NewServiceGoTSRPCClientWithClient(url string, endpoint string, client *http.Client) ServiceGoTSRPCClient {
	return &tsrpcServiceGoTSRPCClient{
		URL:      url,
		EndPoint: endpoint,
		Client:   gotsrpc.NewClientWithHttpClient(client),
	}
}

func (tsc *tsrpcServiceGoTSRPCClient) SetClientEncoding(encoding gotsrpc.ClientEncoding) {
	tsc.Client.SetClientEncoding(encoding)
}

func (tsc *tsrpcServiceGoTSRPCClient) SetTransportHttpClient(client *http.Client) {
	tsc.Client.SetTransportHttpClient(client)
}
func (tsc *tsrpcServiceGoTSRPCClient) UpsertWord(word *github_com_janhalfar_vocablion_services.EventUpsertWord) (err *github_com_janhalfar_vocablion_services.ServiceError, clientErr error) {
	args := []interface{}{word}
	reply := []interface{}{&err}
	clientErr = tsc.Client.Call(tsc.URL, tsc.EndPoint, "UpsertWord", args, reply)
	return
}
